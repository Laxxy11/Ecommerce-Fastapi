# AUTOGENERATED FROM 'project_site/product/queries/update_product.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdateProductResult(NoPydanticValidation):
    id: uuid.UUID
    title: str
    description: str | None
    price: float
    categories: list[UpdateProductResultCategoriesItem]
    created_at: datetime.datetime | None
    updated_at: datetime.datetime | None


@dataclasses.dataclass
class UpdateProductResultCategoriesItem(NoPydanticValidation):
    id: uuid.UUID


async def update_product(
    executor: edgedb.AsyncIOExecutor,
    *,
    current_title: str,
    new_title: str,
    description: str,
    price: float,
    categories: list[str],
) -> UpdateProductResult | None:
    return await executor.query_single(
        """\
        select (
            update Product filter.title=<str>$current_title
            set{
                title :=<str>$new_title,
                description := <str>$description,
                price := <float64>$price,
                categories := (
                    select Category
                    filter .name in array_unpack(<array<str>>$categories)
                )
            }       
        )
        {
            title,description,price,categories,created_at,updated_at
        }\
        """,
        current_title=current_title,
        new_title=new_title,
        description=description,
        price=price,
        categories=categories,
    )
